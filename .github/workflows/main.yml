name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: public.ecr.aws/y1c4k6j6/pdevops-nginx
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.aws
          push: false
          tags: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Tag Docker image
        id: tag-image
        #run: echo "::set-output name=image-uri::${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        run: echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Push Docker image to Amazon ECR
        id: push-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.aws
          push: true
          tags: ${{ steps.tag-image.outputs.image-uri }}

      - name: Deploy Docker image to Amazon EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker stop my-container || true
            docker rm my-container || true
            docker pull ${{ steps.tag-image.outputs.image-uri }}
            docker run -d --name my-container -p 80:80 ${{ steps.tag-image.outputs.image-uri }}
