name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: pdevops-nginx
  IMAGE_TAG: ${{ github.sha }}
  URL: ${{ secrets.EC2_HOST }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.aws
          push: false
          tags: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Tag Docker image
        id: tag-image
        run: echo "image-uri=${{ secrets.ECR_PUBLIC }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Push Docker image to Amazon ECR
        id: push-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.aws
          push: true
          tags: ${{ steps.tag-image.outputs.image-uri }}
    outputs:
      image-uri: ${{ steps.tag-image.outputs.image-uri }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: dev
      url: "http://${{ env.URL }}"
    steps:
      - name: Deploy Docker image to Amazon EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker stop nginx || true
            docker rm nginx || true
            docker pull ${{ job.outputs.image-uri }}
            docker run -d --name nginx -p 80:80 ${{ job.outputs.image-uri }}
